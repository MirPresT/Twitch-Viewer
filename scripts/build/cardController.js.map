{"version":3,"sources":["scripts/cardController.js"],"names":[],"mappings":"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","file":"scripts/cardController.js","sourcesContent":["(function() {\r\n\r\n    angular.module('myApp')\r\n        .controller('cardsCtrl', cardsCtrl);\r\n\r\n    function cardsCtrl($scope, getTwitchData, $http, $q) {\r\n\r\n        // setting stuff\r\n        var vm = this;\r\n        // use service to grab http info\r\n        var promiseArr = getTwitchData.async();\r\n\r\n        // set array for ng repeat;\r\n        vm.channels = [\r\n            //empty until request finish;\r\n        ];\r\n\r\n        let strictPromiseArr = promiseArr.map( a => {\r\n          return a.pop();\r\n        })\r\n\r\n        var promiseArr = getTwitchData.async();\r\n\r\n\r\n        let P = $q.all(strictPromiseArr).then( response => {\r\n            const channelPromises = [];\r\n            response.map( obj => {\r\n            // if error\r\n            if (obj.data.error) {return obj.data.message}\r\n            // destructure object\r\n            const { data, data: {stream} } = obj;\r\n            // if online\r\n            if (stream) {\r\n                const { channel } = stream,\r\n                { display_name:name, game , status } = channel,\r\n                 parsedInfo = setDataOnline(stream);\r\n                 vm.channels.push(parsedInfo);\r\n              } else {\r\n                // if offline\r\n                const {_links:{channel:url}} = data;\r\n                getTwitchData.getChannel(url)\r\n                    .then( data => {\r\n                        // send data into function to be parsed and set to card\r\n                        const parsedInfo = setDataOffline(data.data);\r\n                        vm.channels.push(parsedInfo);\r\n                    });\r\n\r\n                }\r\n            });\r\n            console.log('finished waiting');\r\n        });\r\n\r\n        /*\r\n         * Make channel request for each channel\r\n         */\r\n\r\n        // promiseArr.map(function(arr) {\r\n        //\r\n        //     // arr 0 === name of channel arr 1 is promise\r\n        //     return arr[1].then(function(data) {\r\n        //         // check if chanel exists\r\n        //         if (data.data.error !== undefined) {\r\n        //             return 'error';\r\n        //         } else {\r\n        //             // check if channel is offline/online\r\n        //             if (data.data.stream === null) {\r\n        //                 return [true];\r\n        //             } else {\r\n        //                 setViewOnline();\r\n        //                 // return [setDataOnline(data.data),false];\r\n        //             };\r\n        //         }\r\n        //\r\n        //     }).then(function( cardArr ) {\r\n        //         if (cardArr === 'error' ){\r\n        //             console.log(arr[0],'channel doesnt exist');\r\n        //             // push a special object to array for ^\r\n        //             return 'error';\r\n        //         }\r\n        //         // if chanel exists and ONLINE push channel\r\n        //         else if  ( cardArr[1] === false ){\r\n        //             vm.channels.push(cardArr[0]);\r\n        //             return cardArr;\r\n        //         } else if(cardArr[0] === true){\r\n        //             // chanel is offline make request\r\n        //             // getTwitchData.getChannel(arr[0])\r\n        //             //     .then( data => {\r\n        //             //         const channelInfo = setDataOffline(data.data);\r\n        //             //         vm.channels.push(channelInfo);\r\n        //             //         setViewOffline();\r\n        //             //     });\r\n        //             // return cardArr;\r\n        //         }\r\n        //     })\r\n        // });\r\n\r\n        /*\r\n         * data manipulation to get info I want\r\n         */\r\n        function setDataOffline(data) {\r\n            // channel object later used for ng repeat\r\n            let ci = SetDataBoth(data);\r\n            ci.live = false;\r\n            ci.game = 'Offline';\r\n            ci.frontAction = 'Go to channel';\r\n            return ci;\r\n        }\r\n        $scope.live = true;\r\n        function setDataOnline(stream) {\r\n            // channel object later used for ng repeat\r\n            const { channel, live, game, viewers, preview:{large:large} } = stream;\r\n\r\n            let ci = SetDataBoth(channel);\r\n\r\n            ci.live = true;\r\n            ci.game = game;\r\n            ci.viewers = abbreviateNumber(viewers);\r\n            ci.previewImg = large;\r\n            ci.strmDscr = concatDscr(status);\r\n            ci.frontAction = 'Watch Now';\r\n            return ci;\r\n        }\r\n        function SetDataBoth(channel){\r\n            // channel object later used for ng repeat\r\n            const { display_name:name, followers, url, status } = channel;\r\n\r\n            return {\r\n                name,\r\n                followers: abbreviateNumber(followers),\r\n                url,\r\n                status: concatDscr(status)\r\n            };\r\n        }\r\n        function setViewOnline(){}\r\n        function setViewOffline(){}\r\n\r\n        /*\r\n         * further manipulate certain data...\r\n         */\r\n\r\n        function abbreviateNumber(value) {\r\n            var newValue = value.toString();\r\n\r\n            if (value >= 1000){\r\n                var suffixes = ['k','m'];\r\n                if ( value < 1000000 ){\r\n                    return Math.floor(newValue / 1000) + 'k';\r\n                }\r\n                else {\r\n                    var n = newValue / 1000000;\r\n                    var s = n.toString();\r\n                    n = s.slice(0, s.indexOf('.')+2) + 'm';\r\n                    if(n.slice(2,-1) === '0'){\r\n                        return n.slice(0,1)+'m';\r\n                    } else return n;\r\n                }\r\n            }\r\n            return newValue;\r\n        }\r\n\r\n        function concatDscr(str) {\r\n            return str.slice(0,30) + ' ...';\r\n        }\r\n\r\n    }\r\n})()\r\n"]}