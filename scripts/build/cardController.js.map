{"version":3,"sources":["scripts/cardController.js"],"names":[],"mappings":"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","file":"scripts/cardController.js","sourcesContent":["(function() {\n    angular.module('myApp')\n        .controller('cardsCtrl', cardsCtrl);\n\n    function cardsCtrl($scope, getTwitchData) {\n\n        // setting stuff\n        var vm = this;\n        // use service to grab http info\n        var promiseArr = getTwitchData.async();\n\n        // set array for ng repeat;\n        vm.channels = [\n            //empty until request finish;\n        ];\n\n\n\n        /*\n         * Make channel request for each channel\n         */\n        promiseArr.map(function(arr) {\n\n            return arr[1].then(function(data) {\n                // check if chanel exists\n                if (data.data.error !== undefined) {\n                    return 'error';\n                } else {\n                    // check if channel is offline/online\n                    if (data.data.stream === null) {\n                        return [true];\n                    } else {\n                        setViewOnline();\n                        return [setDataOnline(data.data),false];\n                    };\n                }\n\n            }).then(function( cardArr ) {\n                if (cardArr === 'error' ){\n                    console.log(arr[0],'channel doesnt exist');\n                    // push a special object to array for ^\n                    return 'error';\n                }\n                // if chanel exists and ONLINE push channel\n                else if  ( cardArr[1] === false ){\n                    vm.channels.push(cardArr[0]);\n                    return cardArr;\n                } else if(cardArr[0] === true){\n                    // chanel is offline make request\n                    getTwitchData.getChannel(arr[0])\n                        .then( data => {\n                            const channelInfo = setDataOffline(data.data);\n                            vm.channels.push(channelInfo);\n                            setViewOffline();\n                        });\n                    return cardArr;\n                }\n            })\n        });\n\n        /*\n         * data manipulation to get info I want\n         */\n        function setDataOffline(data) {\n            // channel object later used for ng repeat\n            let ci = SetDataBoth(data);\n            ci.live = false;\n            ci.game = 'offline';\n            return ci;\n        }\n        $scope.live = true;\n        function setDataOnline(data) {\n            // channel object later used for ng repeat\n\n            let stream = data.stream;\n            var { live, game, viewers } = stream;\n\n            let ci = SetDataBoth(data.stream.channel);\n            let sO = data.stream;\n            ci.live = true;\n            ci.game = game;\n            ci.viewers = abbreviateNumber(viewers);\n            ci.previewImg = sO.preview.large;\n            ci.strmDscr = concatDscr(sO.channel.status);\n            ci.frontSubtitel = 'Watch Now';\n            ci.streamLabel = 'Live';\n            return ci;\n        }\n        function SetDataBoth(data){\n            // channel object later used for ng repeat\n            var ci = {}\n            ci.profileName = data.display_name;\n            ci.followers = abbreviateNumber(data.followers);\n            ci.url = data.url;\n            ci.frontSubtitel = 'View Channel';\n            ci.streamLabel = 'Offline';\n\n            return ci;\n        }\n        function setViewOnline(){\n        }\n        function setViewOffline(){\n            // update controller and update view\n        }\n\n\n        /*\n         * further manipulate certain data...\n         */\n\n        function abbreviateNumber(value) {\n            var newValue = value.toString();\n\n            if (value >= 1000){\n                var suffixes = ['k','m'];\n                if ( value < 1000000 ){\n                    return Math.floor(newValue / 1000) + 'k';\n                }\n                else {\n                    var n = newValue / 1000000;\n                    var s = n.toString();\n                    n = s.slice(0, s.indexOf('.')+2) + 'm';\n                    if(n.slice(2,-1) === '0'){\n                        return n.slice(0,1)+'m';\n                    } else return n;\n                }\n            }\n            return newValue;\n        }\n\n        function concatDscr(str) {\n            return str.slice(0,30) + ' ...';\n        }\n\n    }\n})()\n"]}